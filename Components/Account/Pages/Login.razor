@page "/"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using SistemaFacturacion.Data
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Iniciar Sesión</PageTitle>

<div class="login-container">

    <h2 class="login-title">
        <i class="bi bi-person-circle"></i> Login
    </h2>

    <StatusMessage Message="@errorMessage" />

    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />

        <div class="form-group">
            <InputText @bind-Value="Input.Email" class="form-control input-lg" autocomplete="username" placeholder="Correo electrónico" />
            <ValidationMessage For="() => Input.Email" class="text-danger" />
        </div>

        <div class="form-group">
            <InputText type="password" @bind-Value="Input.Password" class="form-control input-lg" autocomplete="current-password" placeholder="Contraseña" />
            <ValidationMessage For="() => Input.Password" class="text-danger" />
        </div>

        <div class="form-check">
            <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
            <label class="form-check-label">Recordarme</label>
        </div>

        <button type="submit" class="btn-red btn-lg w-100">
            Iniciar Sesión
        </button>
    </EditForm>

    <p>
        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Registrar un nuevo usuario</a>
    </p>
</div>

<style>
    body {
        background-color: #c82333; /* Fondo rojo */
    }

    .login-container {
        max-width: 500px;
        margin: 60px auto;
        padding: 30px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
        text-align: center;
    }

    .login-logo {
        width: 100px;
        margin-bottom: 20px;
    }

    .login-title {
        font-size: 28px;
        font-weight: bold;
        color: white;
        background-color: #dc3545; /* Rojo */
        padding: 12px;
        border-radius: 6px;
        margin-bottom: 25px;
    }

    .form-control {
        margin-bottom: 18px;
        font-size: 18px;
        padding: 12px;
        border-radius: 6px;
    }

    .btn-red {
        background-color: #dc3545;
        border: none;
        padding: 14px;
        font-size: 18px;
        font-weight: bold;
        color: white;
    }

        .btn-red:hover {
            background-color: #a71d2a;
        }

    .form-check {
        text-align: left;
        margin-bottom: 20px;
    }
</style>

<!-- 🔗 Enlace a Bootstrap Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user != null)
            {
                if (await UserManager.IsInRoleAsync(user, "Admin"))
                {
                    NavigationManager.NavigateTo("/Dashboard");
                }
                else if (await UserManager.IsInRoleAsync(user, "User"))
                {
                    NavigationManager.NavigateTo("/Dashboard");
                }
                else
                {
                    errorMessage = "No tienes un rol asignado.";
                }
            }
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo("Account/LoginWith2fa", new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("Cuenta bloqueada.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Usuario o contraseña incorrectos.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Recordarme")]
        public bool RememberMe { get; set; }
    }
}
