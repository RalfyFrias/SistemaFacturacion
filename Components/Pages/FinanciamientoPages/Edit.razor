@page "/EditFinanciamientos"
@page "/EditFinanciamientos/financiamientoId={financiamientoId:int}"
@using Radzen
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject FinanciamientoService financiamientoService
@inject ProductosService productosService
@inject NotificationService notificationService

<PageTitle>Modificar Financiamiento</PageTitle>
<EditForm Model="financiamiento" OnValidSubmit="Modificar">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="card shadow-lg">
			<!-- Header -->
			<div class="card-header bg-danger text-white text-center">
				<h3 class="text-center"><strong>Modificar Venta Financiada</strong></h3>
			</div>
			<!-- Body -->
			<div class="card-body">
				<!-- Datos de Factura -->
				<div class="card-body">

					<div class="row mb-3">
						<div class="col-md-6">
							<label class="form-label" for="nombreCliente"><strong>Cliente:</strong></label>
							<InputText id="nombreCliente" class="form-control" @bind-Value="financiamiento.NombreCliente" placeholder="Ej: Juan Pérez"></InputText>
						</div>

						<div class="col-md-6">
							<label class="form-label" for="cedula"><strong>Cédula:</strong></label>
							<InputText id="cedula" class="form-control" @bind-Value="financiamiento.Cedula" placeholder="Ej: 001-2345678-9"></InputText>
						</div>

						<div class="col-md-6">
							<label class="form-label" for="descripcion"><strong>Descripción:</strong></label>
							<InputText id="descripcion" class="form-control" @bind-Value="financiamiento.Descripcion" placeholder="Descripción del financiamiento"></InputText>
						</div>

						<div class="col-md-6">
							<label class="form-label" for="direccion"><strong>Dirección:</strong></label>
							<InputText id="direccion" class="form-control" @bind-Value="financiamiento.Direccion" placeholder="Ej: Ave. Libertad #10"></InputText>
						</div>
					</div>

					<!-- Datos de Financiamiento -->
					<div class="row mb-3">
						<div class="col-md-6">
							<label class="form-label" for="telefono"><strong>Teléfono:</strong></label>
							<InputText id="telefono" class="form-control" @bind-Value="financiamiento.Telefono" placeholder="Ej: 829-284-3031"></InputText>
						</div>
						<div class="col-md-6">
							<label class="form-label" for="email"><strong>Email:</strong></label>
							<InputText id="email" class="form-control" @bind-Value="financiamiento.Email" placeholder="Ej: usuario@gmail.com"></InputText>
						</div>
					</div>


					<!-- Datos de Forma de Pago -->
					<div class="row mb-3">
						<div class="col-md-6">
							<label class="form-label" for="inicial"><strong>Primer Pago (Inicial):</strong></label>
							<InputNumber id="inicial" class="form-control" @bind-Value="financiamiento.Inicial" placeholder="Monto del primer pago" min="0"></InputNumber>
						</div>

						<div class="col-md-6">
							<label class="form-label" for="formaPago"><strong>Forma de Pago:</strong></label>
							<InputText id="formaPago" class="form-control" @bind-Value="financiamiento.FormaPago"></InputText>
						</div>

						<div class="col-md-6">
							<label class="form-label" for="MetodoPago"><strong>Metodo de Pago:</strong></label>
							<InputText id="formaPago" class="form-control" @bind-Value="financiamiento.MetodoPago" placeholder="Efectivo, Tarjeta o otros"></InputText>
						</div>



						<div class="col-6">
							<label class="form-label" for="cantidadPago"><strong>Cantidad de Pagos:</strong></label>
							<InputNumber id="cantidadPago" class="form-control" @bind-Value="financiamiento.CantidadPago" @oninput="CalcularTotalPorCuota"></InputNumber>
						</div>

						<div class="col-6">
							<label class="form-label" for="cantidadPago"><strong>Ganancia:</strong></label>
							<InputNumber id="cantidadPago" class="form-control" @bind-Value="financiamiento.ganancia" @oninput="CalcularTotalPorCuota"></InputNumber>
						</div>
					</div>

				</div>


				@*Detalle Financiamiento*@
				<fieldset class="border-danger  border border-2">
					@*Body*@
					<div class="card-body">
						<section class="row mb-4">
							<div class="row align-content-center">
								<div class="col-4">
									<!-- Búsqueda de Producto -->
									<label class="form-label" for="producto"><strong>Producto:</strong></label>

									<div class="d-flex">
										<InputText id="producto" class="form-control" @bind-Value="productoBuscar" placeholder="Escriba el nombre"></InputText>

										<button type="button" class="btn btn-outline-danger  ms-2" @onclick="FiltrarProductos">
											Buscar
										</button>

										<button type="button" class="btn btn-outline-success" @onclick="AgregarDetalle"><i class="bi bi-plus-circle" /> Agregar</button>
									</div>

									<ValidationMessage For="@(() => productoBuscar)"></ValidationMessage>

									<!-- Lista de Productos Filtrados -->
									@if (productosFiltrados.Any())
									{
										<ul class="list-group mt-2">
											@foreach (var producto in productosFiltrados)
											{
												<li class="list-group-item" @onclick="() => SeleccionarProducto(producto)">
													@producto.Nombre
												</li>
											}
										</ul>
									}


								</div>
								<div class="col-4">
									@*Cantidad*@
									<label class="form-label" for="cantidad"><strong>Cantidad:</strong></label>
									<InputNumber id="cantidad" class="form-control" @bind-Value="cantidad" @onblur="CalcularMonto"></InputNumber>
								</div>
								<div class="col-4">
									@*Descuento*@
									<label class="form-label" for="descuento"><strong>Descuento (%):</strong></label>
									<InputNumber id="descuento" class="form-control" @bind-Value="descuento" @oninput="CalcularMonto"></InputNumber>
								</div>
								
							</div>
						</section>
						<section>
							@if (financiamiento.VentasDetalles.Count > 0)
							{
								@*Tabla Detalles*@
								<table class="table table-bordered miTabla">
									<thead>
										<tr>
											<th>Producto</th>
											<th>Cantidad</th>
											<th>Precio de Venta</th>
											<th>Descuento (%)</th>
											<th>SubTotal</th>
											<th></th>
										</tr>
									</thead>
									<tbody>
										@foreach (var detalle in financiamiento.VentasDetalles)
										{
											<tr>
												<td>@ObtenerNombreProducto(detalle.ProductoId)</td>
												<td>@detalle.Cantidad</td>
												<td>@detalle.PrecioVenta.ToString("N2")</td>
												<td>@detalle.Descuento.ToString("N2")</td>
												<td>@detalle.SubTotal.ToString("N2")</td>
												<td><button type="button" class="btn btn-outline-danger" @onclick="()=> EliminarDetalle(detalle)"><i class="bi bi-trash3-fill" /></button></td>
											</tr>
										}
									</tbody>
								</table>
								<div class="row">
									<div class="col text-start">
										<p><strong>Total de Productos: </strong>@financiamiento.VentasDetalles.Count</p>
									</div>
								</div>
								<div class="row">
									<div class="col text-end">
										<h5><strong>Total:</strong> $@((financiamiento.VentasDetalles.Sum(f => f.SubTotal) + financiamiento.ganancia - financiamiento.Inicial).ToString("N2"))</h5>
									</div>
								</div>

								<div class="row">
									<div class="col text-end">
										<h5><strong>Total por Cuota:</strong> $@financiamiento.TotalPorPago.ToString("N2")</h5>
									</div>
								</div>

							}
						</section>
					</div>
				</fieldset>
			</div>
			@*Footer*@
			<div class="card-footer d-flex justify-content-center">
				<div class="px-2">
					<button type="button" class="btn btn-outline-danger " @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
				</div>
				<button type="submit" class="btn btn-outline-success" disabled="@(financiamiento.VentasDetalles.Count == 0)">
					<i class="bi bi-floppy-fill" /> Modificar
				</button>
			</div>
		</div>
	</div>
</EditForm>
<RadzenNotification />

@code {
	[Parameter]
	public int financiamientoId { get; set; }
	public Financiamiento financiamiento { get; set; } = new Financiamiento();
	public int productoId { get; set; }
	public int cantidad { get; set; }
	public decimal precioVenta { get; set; }
	public decimal descuento { get; set; }
	public decimal subTotal { get; set; }
	public List<Productos> productos = new List<Productos>();
	public string productoBuscar { get; set; } = string.Empty;
	public List<Productos> productosFiltrados { get; set; } = new List<Productos>();

	protected override async Task OnInitializedAsync()
	{
		// Cargar productos
		productos = await productosService.Listar(e => true);

		// Cargar la factura existente con sus detalles
		financiamiento = await financiamientoService.ObtenerPorId(financiamientoId);
		if (financiamiento == null)
		{
			// Redirigir si no se encuentra la factura
			Volver();
			return;
		}

		// Verificar si la factura tiene detalles
		if (financiamiento.VentasDetalles == null || !financiamiento.VentasDetalles.Any())
		{
			financiamiento.VentasDetalles = new List<VentasDetalle>(); // Asegurar que no sea null
		}

		productosFiltrados = productos; // Inicializa con todos los productos
		FiltrarProductos();
	}

	public async Task FiltrarProductos()
	{
		if (string.IsNullOrEmpty(productoBuscar))
		{
			productosFiltrados = new List<Productos>(); // Si está vacío, no mostramos productos
		}
		else
		{
			productosFiltrados = productos
				.Where(p => p.Nombre.Contains(productoBuscar, StringComparison.OrdinalIgnoreCase))
				.ToList();
		}

		StateHasChanged();  // Forzar el re-renderizado
	}


	public async Task SeleccionarProducto(Productos productoSeleccionado)
	{
		productoId = productoSeleccionado.ProductoId;
		productoBuscar = productoSeleccionado.Nombre; // Muestra el nombre seleccionado en el campo de texto
		productosFiltrados.Clear(); // Limpiar la lista después de la selección
		CalcularMonto(); // O cualquier otra función que necesites
	}

	public async void Modificar()
	{
		if (await Validar())
			return;

		// Modificar financiamiento
		await financiamientoService.Modificar(financiamiento);
		MostrarNotificacion("Éxito", "Financiamiento modificado correctamente", NotificationSeverity.Success);
		await Task.Delay(2000);
		Volver();
	}

	public async Task<bool> Validar()
	{
		if (string.IsNullOrEmpty(financiamiento.NombreCliente) ||
						financiamiento.VentasDetalles.Count == 0)
		{
			return true; // Indica que hay errores
		}

		foreach (var detalle in financiamiento.VentasDetalles)
		{
			if (productos.All(p => p.ProductoId != detalle.ProductoId))
			{
				return true; // Detiene el proceso
			}
		}

		return false; // No hay errores
	}

	public string ObtenerNombreProducto(int id)
	{
		var producto = productos.FirstOrDefault(p => p.ProductoId == id);
		return producto?.Nombre ?? "Producto no encontrado";
	}

	public void CalcularTotalPorCuota()
	{
		// Calcular el total sumando los subtotales de los detalles y la ganancia
		decimal total = financiamiento.VentasDetalles.Sum(d => d.SubTotal);
		total += financiamiento.ganancia;

		// Verificar si hay pagos y realizar el cálculo considerando el pago inicial
		if (financiamiento.CantidadPago > 0)
		{
			// Restar el pago inicial al total y dividir entre la cantidad de pagos
			total -= financiamiento.Inicial;
			financiamiento.TotalPorPago = total / financiamiento.CantidadPago;
		}
	}


	public void AgregarDetalle()
	{
		// Buscar si ya existe un detalle con el mismo ProductoId
		var detalleExistente = financiamiento.VentasDetalles
			.FirstOrDefault(d => d.ProductoId == productoId);

		if (detalleExistente != null)
		{
			// Actualizar el detalle existente
			detalleExistente.Cantidad += cantidad;
			detalleExistente.Descuento = descuento;
			detalleExistente.SubTotal = CalcularSubTotal(precioVenta, detalleExistente.Cantidad, descuento);
			MostrarNotificacion("Éxito", "Detalle actualizado correctamente", NotificationSeverity.Success);
		}
		else
		{
			// Agregar un nuevo detalle si no existe
			var nuevoDetalle = new VentasDetalle
				{
					ProductoId = productoId,
					Cantidad = cantidad,
					PrecioVenta = precioVenta,
					Descuento = descuento,
					SubTotal = CalcularSubTotal(precioVenta, cantidad, descuento)
				};

			financiamiento.VentasDetalles.Add(nuevoDetalle);
			MostrarNotificacion("Éxito", "Detalle agregado correctamente", NotificationSeverity.Success);
		}

		// Recalcular el total por cuota después de agregar o actualizar un detalle
		CalcularTotalPorCuota();

		// Limpiar los campos de entrada
		LimpiarPantalla();
	}

	public void EliminarDetalle(VentasDetalle detalle)
	{
		financiamiento.VentasDetalles.Remove(detalle);
		CalcularTotalPorCuota();
		MostrarNotificacion("Éxito", "Detalle eliminado correctamente", NotificationSeverity.Success);
	}

	public void CalcularMonto()
	{
		if (productoId != 0)
		{
			var producto = productos.FirstOrDefault(p => p.ProductoId == productoId);
			if (producto != null)
			{
				precioVenta = producto.PrecioVenta;
				subTotal = CalcularSubTotal(precioVenta, cantidad, descuento);
			}
		}
	}

	private decimal CalcularSubTotal(decimal precioVenta, int cantidad, decimal descuento)
	{
		var totalSinDescuento = precioVenta * cantidad;
		var descuentoAplicado = (totalSinDescuento * descuento) / 100;
		return totalSinDescuento - descuentoAplicado;
	}

	public void LimpiarPantalla()
	{
		productoId = 0;
		cantidad = 0;
		descuento = 0;
		precioVenta = 0;
		subTotal = 0;
	}

	void Volver() => navigation.NavigateTo("/financiamientos");

	void MostrarNotificacion(string titulo, string mensaje, NotificationSeverity severidad)
	{
		var notification = new NotificationMessage
			{
				Severity = severidad,
				Summary = titulo,
				Detail = mensaje,
				Duration = 3000
			};
		notificationService.Notify(notification);
	}
}
