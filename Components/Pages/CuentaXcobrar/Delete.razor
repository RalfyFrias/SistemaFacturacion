@page "/DeleteCuentasXcobrar"
@page "/DeleteCuentasXcobrar/cuentasXcobrarId={cuentasXcobrarId:int}"
@using Radzen
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject CuentasXcobrarService cuentasXcobrarService
@inject ProductosService productosService
@inject NotificationService notificationService



<div class="container mt-4">
    <div class="card-header bg-danger text-white text-center">
        <h5><strong>Eliminar Cuenta por Cobrar</strong></h5>
    </div>
    <div class="card shadow-lg p-4">
        <div class="d-flex justify-content-between">
            <div class="col-md-6">
                <p><strong>Cliente:</strong> @cuenta?.NombreCliente</p>
                <p><strong>Fecha:</strong> @cuenta?.FechaCreacion.ToShortDateString()</p>
                <p><strong>Cédula:</strong> @cuenta?.Cedula</p>

            </div>

            <div class="col-md-6">

                <p><strong>Email:</strong> @cuenta?.Email</p>
                <p><strong>Dirección:</strong> @cuenta?.Direccion</p>
                <p><strong>Teléfono:</strong> @cuenta?.Telefono</p>

            </div>
        </div>

        <hr />

        @if (cuenta.VentasDetalles.Count > 0)
        {
            <table class="table table-striped mt-4">
                <thead class="thead-dark">
                    <tr>
                        <th>Producto</th>
                        <th>Cantidad</th>
                        <th>Precio de Venta</th>
                        <th>Descuento</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var detalle in cuenta.VentasDetalles)
                    {
                        <tr>
                            <td>@ObtenerNombreProducto(detalle.ProductoId)</td>
                            <td>@detalle.Cantidad</td>
                            <td>@detalle.PrecioVenta.ToString("N2")</td>
                            <td>@detalle.Descuento.ToString("N2")</td>
                            <td>@detalle.SubTotal.ToString("N2")</td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="row">
                <div class="col text-start">
                    <p><strong>Total de Productos: </strong>@cuenta.VentasDetalles.Count</p>
                </div>
            </div>

            <div class="row">
                <div class="col text-end">
                    <h5><strong>Total:</strong> $@cuenta.VentasDetalles.Sum(c => c.SubTotal).ToString("N2")</h5>
                </div>
            </div>
        }

        <hr />

        <div class="mt-4 d-flex justify-content-end">
            <button type="button" class="btn btn-outline-danger  me-2" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
            <button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><i class="bi bi-trash3-fill" /> Eliminar</button>
        </div>
    </div>
</div>

<RadzenNotification />

@code {
    [Parameter]
    public int cuentasXcobrarId { get; set; }
    public CuentasXcobrar cuenta { get; set; } = new CuentasXcobrar();
    public List<Productos> productos = new List<Productos>();

    protected override async Task OnInitializedAsync()
    {
        productos = await productosService.Listar(e => true);
        cuenta = await cuentasXcobrarService.Buscar(cuentasXcobrarId);
    }

    public async Task Eliminar()
    {
        // Primero eliminamos los detalles asociados a la cuenta por cobrar
        foreach (var detalle in cuenta.VentasDetalles.ToList()) // Evita modificar la colección mientras se itera
        {
            bool detalleEliminado = await cuentasXcobrarService.EliminarDetalle(detalle.VentaDetalleId); // Llamada correcta
            if (!detalleEliminado)
            {
                await MostrarNotificacion("Error al eliminar el detalle de la cuenta por cobrar.", NotificationSeverity.Error);
                return; // Detenemos la ejecución si hay un error
            }
        }

        // Luego eliminamos la cuenta por cobrar principal
        bool eliminado = await cuentasXcobrarService.Eliminar(cuentasXcobrarId);

        if (eliminado)
        {
            await MostrarNotificacion("Cuenta eliminada exitosamente.", NotificationSeverity.Success);
            await Task.Delay(2000);
            navigation.NavigateTo("/CuentasXcobrar");
        }
        else
        {
            await MostrarNotificacion("Error inesperado al eliminar la cuenta por cobrar.", NotificationSeverity.Error);
        }

        StateHasChanged();
    }

    public string ObtenerNombreProducto(int id)
    {
        var dato = productos.FirstOrDefault(c => c.ProductoId == id);
        return dato?.Nombre ?? "Producto no encontrado";
    }

    void Volver()
    {
        navigation.NavigateTo("/CuentasXcobrar");
    }

    public async Task MostrarNotificacion(string mensaje, NotificationSeverity severidad)
    {
        var notification = new NotificationMessage
            {
                Severity = severidad,
                Summary = severidad == NotificationSeverity.Success ? "Éxito" : "Error",
                Detail = mensaje,
                Duration = 3000
            };
        notificationService.Notify(notification);
    }
}

